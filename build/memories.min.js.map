{"version":3,"sources":["webpack://@wadahkode/memories/./src/dateParser.js","webpack://@wadahkode/memories/./src/memories.js","webpack://@wadahkode/memories/webpack/bootstrap","webpack://@wadahkode/memories/./index.js"],"names":["module","exports","date","Date","String","parsed","getTime","dateParser","prop","Object","Array","undefined","isDebug","this","length","map","item","key","name","type","delta","now","datetime","Math","floor","Error","unknown","periode","unPeriode","timeListAgo","prefix","suffix","hasOwnProperty","execute","warning","noProp","isFunction","second","minute","hour","day","week","month","year","moment","point","h","i","s","y","m","d","w","n","timeNow","Infinity","HOUR","DAY","WEEK","MONTH","YEAR","message","console","warn","process","exit","get","set","value","Boolean","propName","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","memories","document","querySelectorAll","forEach","time","getAttribute","options","toString","replace","language","locale","timeZone","hour12","setInterval","statusExpired","expired","getExpired","innerHTML","dateTime","async","timeAgo","getMemories","then","response"],"mappings":"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","file":"memories.min.js","sourcesContent":["/**\r\n * Mendapatkan total waktu\r\n *\r\n * @author wadahkode <mvp.dedefilaras@gmail.com>\r\n * @since version 1.1.2\r\n * @param {*} date string | object\r\n */\r\nconst dateParser = (date = Date | String) => {\r\n  let parsed = undefined;\r\n\r\n  if (typeof date === \"string\") {\r\n    parsed = new Date(date);\r\n  } else {\r\n    parsed = date;\r\n  }\r\n  return parsed.getTime();\r\n};\r\n\r\nmodule.exports = dateParser;\r\n","const dateParser = require(\"./dateParser\");\r\n\r\n/**\r\n * Memories\r\n *\r\n * Mengubah waktu menjadi waktu moment\r\n *\r\n * Jika anda adalah seorang pengembang javascript pasti tidak akan asing dengan momentjs,\r\n * disini saya mencoba membuat dengan versi dari Indonesiaku tercinta.\r\n *\r\n * @author wadahkode <mvp.dedefilaras@gmail.com>\r\n * @since version 1.0.0\r\n */\r\nclass Memories {\r\n  /**\r\n   * @param {*} prop Object | Array | undefined\r\n   * @param {*} isDebug boolean\r\n   */\r\n  constructor(prop = Object | Array | undefined, isDebug = false) {\r\n    this.isDebug = isDebug;\r\n    this.prop = prop;\r\n\r\n    if (prop instanceof Array && prop.length >= 1) {\r\n      prop.map((item, key) => (this[key] = item));\r\n    } else if (prop instanceof Object) {\r\n      for (let name in prop) {\r\n        this[name] = prop[name];\r\n      }\r\n    } else {\r\n      //\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Menghitung waktu yang sudah berlalu sejak sekarang\r\n   *\r\n   * @author StefansArya\r\n   * @param  {String|undefined} type \"day\" | \"minute\" | \"second\"\r\n   * @return {Number}      Return ms jika parameter type tidak di isi\r\n   */\r\n  delta(type = String | undefined) {\r\n    let delta = Date.now() - dateParser(this.datetime);\r\n    if (type === undefined) return delta;\r\n\r\n    delta /= 1000;\r\n    if (type === \"second\") return Math.floor(delta);\r\n    if (type === \"minute\") return Math.floor(delta / 60);\r\n    if (type === \"hour\") return Math.floor(delta / 3600);\r\n    if (type === \"day\") return Math.floor(delta / (3600 * 24));\r\n    if (type === \"month\") return Math.floor(delta / (3600 * 24 * 30));\r\n    if (type === \"year\") return Math.floor(delta / (3600 * 24 * 30 * 12));\r\n\r\n    throw new Error(\r\n      'Parameter \"type\" hanya menerima undefined atau string seperti (second, minute, hour, day, month). Tetapi malah dapat:' +\r\n        type\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Expired Time\r\n   *\r\n   * Metode yang digunakan untuk menentukan waktu expired.\r\n   *\r\n   * @param {*} unknown String\r\n   */\r\n  expired(unknown = String) {\r\n    let periode = dateParser(this.datetime),\r\n      unPeriode = dateParser(new Date());\r\n\r\n    return Math.floor((periode - unPeriode) / this.timeListAgo(unknown)) < 1;\r\n  }\r\n\r\n  /**\r\n   * Mencetak waktu menjadi waktu yang sudah berlalu,\r\n   * jika kedua parameter dikosongkan, maka sistem akan menjalankan pengaturan bawaan.\r\n   *\r\n   * @param {*} prefix string\r\n   * @param {*} suffix object\r\n   */\r\n  timeAgo(prefix = \"\", suffix = {}) {\r\n    // check property datetime\r\n    if (this.hasOwnProperty(\"datetime\") == false) {\r\n      this.execute(this.isDebug, this.warning.noProp(\"datetime\"));\r\n    }\r\n\r\n    for (let name in this) {\r\n      if (typeof this[name] == \"function\") {\r\n        this.execute(this.isDebug, this.warning.isFunction(name));\r\n      }\r\n    }\r\n\r\n    const periode = dateParser(new Date());\r\n    const unPeriode = dateParser(this.datetime);\r\n    const second = 1000,\r\n      minute = 60 * second,\r\n      hour = 60 * minute,\r\n      day = hour * 24,\r\n      week = day * 7,\r\n      month = day * 30,\r\n      year = day * 365;\r\n\r\n    const moment = (point, name) => {\r\n      const label = {\r\n        h: `${point} ${prefix !== \"birthday\" ? \"hour ago\" : suffix[name]}`,\r\n        i: `${point} ${prefix !== \"birthday\" ? \"minute ago\" : suffix[name]}`,\r\n        s: `${point} ${prefix !== \"birthday\" ? \"second ago\" : suffix[name]}`,\r\n        y: `${point} ${prefix !== \"birthday\" ? \"year ago\" : suffix[name]}`,\r\n        m: `${point} ${prefix !== \"birthday\" ? \"month ago\" : suffix[name]}`,\r\n        d: `${point} ${prefix !== \"birthday\" ? \"day ago\" : suffix[name]}`,\r\n        w: `${point} ${prefix !== \"birthday\" ? \"week ago\" : suffix[name]}`,\r\n        n: `${point < 1 && prefix !== \"birthday\" ? \"just now\" : suffix[name]}`,\r\n      };\r\n      return label[name];\r\n    };\r\n\r\n    const timeNow = periode > unPeriode && periode - unPeriode;\r\n\r\n    const parsed =\r\n      timeNow <= Math.floor(second * 1.5)\r\n        ? moment(Math.floor(timeNow / second), \"n\")\r\n        : timeNow > second && timeNow < minute\r\n        ? moment(Math.floor(timeNow / second), \"s\")\r\n        : timeNow > second && timeNow > minute && timeNow < hour\r\n        ? moment(Math.floor(timeNow / minute), \"i\")\r\n        : timeNow > minute && timeNow > hour && timeNow < day\r\n        ? moment(Math.floor(timeNow / hour), \"h\")\r\n        : timeNow > hour && timeNow > day && timeNow < week\r\n        ? moment(Math.floor(timeNow / day), \"d\")\r\n        : timeNow > day && timeNow > week && timeNow < month\r\n        ? moment(Math.floor(timeNow / week), \"w\")\r\n        : timeNow > week && timeNow > month && timeNow < year\r\n        ? moment(Math.floor(timeNow / month), \"m\")\r\n        : timeNow > month && timeNow > year\r\n        ? moment(Math.floor(timeNow / year), \"y\")\r\n        : Infinity;\r\n\r\n    return parsed;\r\n  }\r\n\r\n  timeListAgo(name = String) {\r\n    const SECOND = 1000,\r\n      MINUTE = 60 * SECOND,\r\n      HOUR = 60 * MINUTE,\r\n      DAY = HOUR * 24,\r\n      WEEK = DAY * 7,\r\n      MONTH = DAY * 30,\r\n      YEAR = DAY * 365;\r\n\r\n    const timelist = {\r\n      \"in second\": SECOND,\r\n      second: SECOND,\r\n      \"in minute\": MINUTE,\r\n      minute: MINUTE,\r\n      \"in hour\": HOUR,\r\n      hour: HOUR,\r\n      \"in day\": DAY,\r\n      day: DAY,\r\n      \"in week\": WEEK,\r\n      week: WEEK,\r\n      \"in month\": MONTH,\r\n      month: MONTH,\r\n      \"in year\": YEAR,\r\n      year: YEAR,\r\n    };\r\n\r\n    return timelist[name];\r\n  }\r\n\r\n  /**\r\n   * Untuk memberi pesan kesalahan jika properti datetime tidak dapat ditemukan\r\n   * dan sistem debug telah dinyalakan, atau keluarkan program.\r\n   *\r\n   * @param {*} isDebug boolean\r\n   */\r\n  execute(isDebug = false, message = String | undefined) {\r\n    if (isDebug) {\r\n      console.warn(\"\\x1b[33m[x] Warning: %s\\x1b[0m\", message);\r\n      return process.exit(this);\r\n    }\r\n    return process.exit(this);\r\n  }\r\n\r\n  get get() {}\r\n\r\n  /**\r\n   * Getter\r\n   *\r\n   * Fungsi untuk mendapatkan property\r\n   *\r\n   * @param {String} name string\r\n   */\r\n  get(name = String) {\r\n    return this[name];\r\n  }\r\n\r\n  /**\r\n   * Mengatur property yang akan ditambahkan\r\n   *\r\n   * @param {*} value object | string | boolean | undefined\r\n   */\r\n  set set(value = Date | String | Boolean | undefined) {\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Setter\r\n   *\r\n   * Fungsi untuk mengatur property\r\n   *\r\n   * @param {String|undefined} name string | undefined\r\n   * @param {String|Object} value object | string | boolean | undefined\r\n   */\r\n  set(\r\n    name = String | undefined,\r\n    value = Object | Date | String | Boolean | undefined\r\n  ) {\r\n    this.warning = {\r\n      noProp: (propName) =>\r\n        `Parameter [${propName}] diperlukan, kamu dapat mengaturnya dengan menggunakan metode memories.set('${propName}', value)\\n`,\r\n      isFunction: (propName) =>\r\n        `Parameter [${propName}] dengan tipe [Function] tidak dapat diterima!\\n`,\r\n    };\r\n    return (this[name] = value);\r\n  }\r\n}\r\n\r\nmodule.exports = Memories;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const memories = require(\"./src/memories\");\r\nconst article = document.querySelectorAll(\"time\");\r\n\r\narticle.forEach((time) => {\r\n  const prefix = time.getAttribute(\"prefix\");\r\n  const options = {\r\n    datetime: new Date(\r\n      time.getAttribute(\"datetime\").toString().replace(\",\", \"\")\r\n    ),\r\n    language: \"id-ID\",\r\n    locale: {\r\n      timeZone: \"Asia/Jakarta\",\r\n      hour12: false,\r\n    },\r\n  };\r\n\r\n  setInterval(() => {\r\n    if (prefix == \"expired\") {\r\n      let statusExpired = getExpired(options);\r\n      if (statusExpired) {\r\n        return (time.innerHTML = \"expired: <b>sudah kadaluarsa</b>\");\r\n      } else {\r\n        return (time.innerHTML = \"expired: <b>\" + time.dateTime + \"</b>\");\r\n      }\r\n    } else {\r\n      return getMemories(options, prefix).then((response) => {\r\n        if (response) {\r\n          time.innerHTML = response;\r\n        }\r\n        // clearInterval(refresh);\r\n      });\r\n    }\r\n  }, 10);\r\n});\r\n\r\n// Mengatur waktu standar menjadi waktu moment\r\nasync function getMemories(options = {}, prefix) {\r\n  const moment = new memories(options);\r\n\r\n  if (prefix != null) {\r\n    return await moment.timeAgo(prefix, {\r\n      y: \"tahun\",\r\n      m: \"bulan\",\r\n      d: \"hari\",\r\n      w: \"minggu\",\r\n      h: \"jam\",\r\n      i: \"menit\",\r\n      s: \"detik\",\r\n      n: \"baru saja\",\r\n    });\r\n  }\r\n  return await moment.timeAgo();\r\n}\r\n\r\n// Mengatur waktu standar menjadi waktu moment\r\nfunction getExpired(options = {}) {\r\n  const moment = new memories(options);\r\n\r\n  return moment.expired(\"in day\");\r\n}\r\n"],"sourceRoot":""}